name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  PYTHON_VERSION: 3.9

jobs:
  changes:
    name: Check for Python file changes
    runs-on: self-hosted
    outputs:
      python: ${{steps.filter.outputs.python}}
      mypy: ${{steps.filter.outputs.mypy}}
      flake8: ${{steps.filter.outputs.flake8}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            python:
              - '**/*.py'
              - 'pyproject.toml'
              - 'poetry.lock'
              - '.github/workflows/**/*.yml'
            mypy:
              - '.mypy.ini'
            flake8:
              - '.flake8'

  typecheck:
    name: Type check Python
    needs: [changes]
    if: ${{needs.changes.outputs.python == 'true' || needs.changes.outputs.mypy == 'true'}}
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v7

      - name: Configure GitHub to download private repos
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          git config --global url."https://${PAT}@github.com/".insteadOf "https://github.com/"

      - name: Install dependencies
        # if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          poetry export -f requirements.txt --output requirements.txt --dev --without-hashes
          pip install -r requirements.txt --no-cache-dir

      # - name: Load cached Python
      #   uses: actions/cache@v2
      #   id: python-cache
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-

      - name: Run mypy
        uses: tsuyoshicho/action-mypy@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: info

  lint:
    name: Lint Python
    needs: [changes]
    if: ${{needs.changes.outputs.python == 'true' || needs.changes.outputs.flake8 == 'true'}}
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v7

      - name: Configure GitHub to download private repos
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          git config --global url."https://${PAT}@github.com/".insteadOf "https://github.com/"

      # - name: Load cached Python
      #   uses: actions/cache@v2
      #   id: python-cache
      #   with:
      #     path: ~/.cache/pypoetry/virtualenvs
      #     key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}-${{ hashFiles('pyproject.toml') }}

      - name: Install dependencies
        # if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          poetry export -f requirements.txt --output requirements.txt --dev --without-hashes
          pip install -r requirements.txt --no-cache-dir

      - name: Run flake8
        uses: reviewdog/action-flake8@v3
        with:
          reporter: github-pr-review
          level: info
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_error: true

  format:
    name: Format
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # - name: Load cached Python
      #   uses: actions/cache@v2
      #   id: python-cache
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-

      - name: Install pre-commit
        run: |
          pip install pre-commit

      # - name: Load cached pre-commit environment
      #   uses: actions/cache@v2
      #   id: pre-commit-cache
      #   with:
      #     path: ~/.cache/pre-commit
      #     key: ${{ runner.os }}-pre-commit-${{ hashFiles('**/.pre-commit-config.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pre-commit-

      - name: Run pre-commit hook
        id: run-pre-commit-hooks
        run: |
          git add .pre-commit-config.yaml
          pre-commit run --color=always --all-files

      - name: Annotate any changes using reviewdog
        if: ${{ failure() }}
        id: reviewdog-suggester
        uses: reviewdog/action-suggester@v1
        with:
          tool_name: pre-commit
